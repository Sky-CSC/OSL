@page "/runes/all"
@using Newtonsoft.Json;
@layout EmptyLayout
<PageTitle>Runes Overlay All</PageTitle>

<div class="perks">
    @**@
    @{
        string backgroundPicture;
        if (RunesPage.overlay.BackgroundPicture == false)
        {
            backgroundPicture = "";
        }
        else
        {
            backgroundPicture = formatingData.BakgroundPicture;
        }

        string colorForegroundBackground;
        if (RunesPage.overlay.ForegroundBackground == false)
        {
            colorForegroundBackground = "";
        }
        else
        {
            colorForegroundBackground = formatingData.OverlayColorBackgroudGradient;
        }
    }
    <div class="perks-background">
        @*Bakground color*@
        <div class="perks-background-gradiant" style="background-image: @formatingData.BackgroudGradient">
            @*Black veil*@
            <div class="perks-background-color" style="background-image: @colorForegroundBackground">
            </div>
        </div>
        @*Bakground picture*@
        <img class="perks-background-img" src="@backgroundPicture" />
    </div>

    <div class="perks-all">
        @foreach (var participants in DataProcessing.Runes.summonerPerksList)
        {
            @if (participants.TeamId == 100 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Top) == 0)
            {
                <div class="perks-blue-top">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureTop" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.BlueSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 100 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Jungle) == 0)
            {
                <div class="perks-blue-jungle">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureJungle" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.BlueSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 100 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Mid) == 0)
            {
                <div class="perks-blue-mid">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureMid" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.BlueSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 100 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.ADC) == 0)
            {
                <div class="perks-blue-adc">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureAdc" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.BlueSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 100 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Support) == 0)
            {
                <div class="perks-blue-supp">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureSupp" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.BlueSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 200 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Top) == 0)
            {
                <div class="perks-red-top">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureTop" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.RedSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 200 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Jungle) == 0)
            {
                <div class="perks-red-jungle">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureJungle" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.RedSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 200 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Mid) == 0)
            {
                <div class="perks-red-mid">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureMid" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.RedSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 200 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.ADC) == 0)
            {
                <div class="perks-red-adc">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureAdc" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.RedSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
            else if (participants.TeamId == 200 && participants.Lane.CompareTo(DataProcessing.Runes.Lanes.Support) == 0)
            {
                <div class="perks-red-supp">
                    <div class="lane-picture">
                        <img class="lane-picture-img" src="@formatingData.LanePictureSupp" />
                    </div>
                    @*Display champ picture *@
                    <div class="champ-picture">
                        <img class="champ-picture-img" style="border: @formatingData.RedSideColorBorderChampion" src="@GetChampionPicturePath(participants.ChampionId)" />
                    </div>
                    @*Display perks*@
                    <div class="perks-wrapper">
                        <img class="perks-img" src="@GetPerksIconPath(participants.Perks.perkIds[0])" />
                    </div>
                    <div class="perks-sub-wrapper">
                        <img class="perks-sub-img" src="@GetPerksIconPath(participants.Perks.perkSubStyle)" />
                    </div>
                </div>
            }
        }

        <div class="separation-bar" style="background-color: @formatingData.BlueSideColorSeparationBar">
        </div>
    </div>
</div>


@code {
    private System.Timers.Timer timer = new(5000);

    protected override void OnInitialized()
    {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.Start();
    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose() => timer.Dispose();
}
