@page "/runes"
@using MudBlazor
@using OSL_Server.DataLoader.CDragon;
@*@using CDragondataCDragon*@


<PageTitle>Runes</PageTitle>
<div class="parent">
    <div class="runes">
        <div class="content">
            <h1 class="title">Runes</h1>
            Champions are automatically placed on the lanes
            <br />Choose champion lanes for display runes lane vs lane <button class="btn btn-primary button-form" style="background-color: darkred" @onclick="@RunesPage.ResetLanes">Reset champion lane</button>
            <br />
            <br />
            <a class="btn btn-primary button-form" href="runes/top" target="_blank">Link Runes Top</a>
            <a class="btn btn-primary button-form" href="runes/mid" target="_blank">Link Runes Mid</a>
            <a class="btn btn-primary button-form" href="runes/jungle" target="_blank">Link Runes Jungle</a>
            <a class="btn btn-primary button-form" href="runes/adc" target="_blank">Link Runes Adc</a>
            <a class="btn btn-primary button-form" href="runes/supp" target="_blank">Link Runes Support</a>
            <a class="btn btn-primary button-form" href="runes/adcsupp" target="_blank">Link Runes Adc and Support</a>
            <br />
            <br />

            @if (summonerPerksList.Count() != 0)
            {
                <div class="alert-primary" style="border-radius: 10px;">
                    <h3 style="padding: 5px;"><strong>Info!</strong> Rune information available</h3>
                </div>
                <br />
                <div class="summoner-lane">
                    <div class="blue-side">
                        @foreach (var summoner in summonerPerksList.Select((info, index) => (info, index)))
                        {
                            @if (summoner.info.TeamId == 100)
                            {
                                <div class="summoner-lane-info">
                                    <div class="summoner-lane-info-summoner-name">
                                        @summonerPerksList[summoner.index].SummonerName
                                    </div>
                                    <div class="summoner-lane-info-picture-champ">
                                        <img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[summoner.index].ChampionId)" />
                                    </div>
                                    <div class="summoner-lane-info-select">
                                        <EditForm Model="laneSelectionSummoner1">
                                            <InputSelect @bind-Value="summonerPerksList[summoner.index].Lane">
                                                @foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))
                                                {
                                                    <option>@lane</option>
                                                }
                                            </InputSelect>
                                        </EditForm>
                                    </div>
                                </div>
                                summonerPerksList[summoner.index].Lane = summonerPerksList[summoner.index].Lane;
                            }
                        }
                    </div>

                    <div class="red-side">
                        @foreach (var summoner in summonerPerksList.Select((info, index) => (info, index)))
                        {
                            @if (summoner.info.TeamId == 200)
                            {
                                <div class="summoner-lane-info">
                                    <div class="summoner-lane-info-summoner-name">
                                        @summonerPerksList[summoner.index].SummonerName
                                    </div>
                                    <div class="summoner-lane-info-picture-champ">
                                        <img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[summoner.index].ChampionId)" />
                                    </div>
                                    <div class="summoner-lane-info-select">
                                        <EditForm Model="laneSelectionSummoner1">
                                            <InputSelect @bind-Value="summonerPerksList[summoner.index].Lane">
                                                @foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))
                                                {
                                                    <option>@lane</option>
                                                }
                                            </InputSelect>
                                        </EditForm>
                                    </div>
                                </div>
                                summonerPerksList[summoner.index].Lane = summonerPerksList[summoner.index].Lane;
                            }
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="alert-danger" style="border-radius: 10px;">
                    <h3 style="padding: 5px;"><strong>Info!</strong> Not rune information found</h3>
                </div>
            }
            @*<div class="red-side">*@
            @*@foreach (var summoner in summonerPerksList.Select((info, index) => (info, index)))*@
            @*{*@
            @*@if (summoner.info.TeamId.Equals("200"))*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[summoner.index].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[summoner.index].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner1">*@
            @*<InputSelect @bind-Value="summonerPerksList[summoner.index].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@
            @*summonerPerksList[0].Lane = laneSelectionSummoner1.lanes;*@
            @*summonerPerksList[summoner.index].Lane = summonerPerksList[summoner.index].Lane;*@
            @*}*@
            @*}*@
            @*</div>*@
            @*<div class="blue-side">*@
            @*@if (summonerPerksList.Count() >= 1)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[0].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[0].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner1">*@
            @*<InputSelect @bind-Value="summonerPerksList[0].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@
            @*summonerPerksList[0].Lane = laneSelectionSummoner1.lanes;*@
            @*summonerPerksList[0].Lane = summonerPerksList[0].Lane;*@
            @*}*@

            @*@if (summonerPerksList.Count() >= 2)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[1].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[1].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner2">*@
            @*<InputSelect @bind-Value="summonerPerksList[1].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[1].Lane = summonerPerksList[1].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 3)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[2].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[2].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner3">*@
            @*<InputSelect @bind-Value="summonerPerksList[2].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[2].Lane = summonerPerksList[2].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 4)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[3].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[3].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner4">*@
            @*<InputSelect @bind-Value="summonerPerksList[3].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[3].Lane = summonerPerksList[3].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 5)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[4].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[4].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner5">*@
            @*<InputSelect @bind-Value="summonerPerksList[4].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[4].Lane = summonerPerksList[4].Lane;*@

            @*}*@

            @*</div>*@
            @*<div class="red-side">*@

            @*@if (summonerPerksList.Count() >= 6)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[5].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[5].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner6">*@
            @*<InputSelect @bind-Value="summonerPerksList[5].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[5].Lane = summonerPerksList[5].Lane;*@

            @*}*@


            @*@if (summonerPerksList.Count() >= 7)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[6].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[6].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner7">*@
            @*<InputSelect @bind-Value="summonerPerksList[6].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[6].Lane = summonerPerksList[6].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 8)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[7].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[7].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner8">*@
            @*<InputSelect @bind-Value="summonerPerksList[7].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[7].Lane = summonerPerksList[7].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 9)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[8].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[8].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner9">*@
            @*<InputSelect @bind-Value="summonerPerksList[8].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[8].Lane = summonerPerksList[8].Lane;*@

            @*}*@

            @*@if (summonerPerksList.Count() >= 10)*@
            @*{*@
            @*<div class="summoner-lane-info">*@
            @*<div class="summoner-lane-info-summoner-name">*@
            @*@summonerPerksList[9].SummonerName*@
            @*</div>*@
            @*<div class="summoner-lane-info-picture-champ">*@
            @*<img class="summoner-lane-info-picture-champ-img" src="@GetChampionPicturePath(summonerPerksList[9].ChampionId)" />*@
            @*</div>*@
            @*<div class="summoner-lane-info-select">*@
            @*<EditForm Model="laneSelectionSummoner10">*@
            @*<InputSelect @bind-Value="summonerPerksList[9].Lane">*@
            @*@foreach (Lanes lane in Enum.GetValues(typeof(Lanes)))*@
            @*{*@
            @*<option>@lane</option>*@
            @*}*@
            @*</InputSelect>*@
            @*</EditForm>*@
            @*</div>*@
            @*</div>*@

            @*summonerPerksList[9].Lane = summonerPerksList[9].Lane;*@

            @*}*@
            @*</div>*@
            @*</div>*@
            <br />
            @{
                //HideOrDisplayContent();
            }
            <div class="customization">
                <button class="btn btn-primary button-form" style="background-color: @overlayButton.color" @onclick="@HideOrDisplayContent">
                    Clic to @overlayButton.text customization
                </button>
                <button class="btn btn-primary button-form" style="background-color: darkred" @onclick="@ResetColor">Reset color</button>
                <br />
                <br />
                <div style="display: @displayContent">
                    <EditForm Model="@overlay" OnValidSubmit="@Overlay.BackgroundPictureSubmit">
                        <label style="font-weight: bold">Background Picture : </label>
                        <InputCheckbox id="name" @bind-Value="overlay.BackgroundPicture" />
                    </EditForm>
                    <EditForm Model="@overlay" OnValidSubmit="@Overlay.ForegroundBackgroundSubmit">
                        <label style="font-weight: bold">Enable foreground background : </label>
                        <InputCheckbox id="name" @bind-Value="overlay.ForegroundBackground" />
                    </EditForm>
                    <EditForm Model="@overlay" OnValidSubmit="@Overlay.BackgroudGradientSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <label style="font-weight: bold">Backgroud Gradient ("@RunesAdcPage.formatingData.BackgroudGradient") : </label>
                        <br /><InputNumber id="name" style="width: 50px" @bind-Value="overlay.BackgroudGradientDeg" placeholder="150" />
                        deg
                        <spam style="font-weight: bold"></spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.BackgroudGradientColor1" @onclick="@Overlay.SetBackgroudGradientColor1"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.BackgroudGradientColor1"> @RunesAdcPage.formatingData.BackgroudGradientColor1</spam>
                        <InputNumber id="name" style="width: 50px" @bind-Value="overlay.BackgroudGradientPercent1" placeholder="0" />
                        %
                        <spam style="font-weight: bold"></spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.BackgroudGradientColor2" @onclick="@Overlay.SetBackgroudGradientColor2"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.BackgroudGradientColor2"> @RunesAdcPage.formatingData.BackgroudGradientColor2</spam>
                        <InputNumber id="name" style="width: 50px" @bind-Value="overlay.BackgroudGradientPercent2" placeholder="100" />
                        %
                        <button class="btn btn-primary button-form" style="background-color: darkgreen" type="submit">Submit</button>
                    </EditForm>

                    <br /><spam style="font-weight: bold">Blue Side Color Text Summoner  </spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.BlueSideColorTextSummoner" @onclick="@Overlay.SetBlueSideColorTextSummoner"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.BlueSideColorTextSummoner"> @RunesAdcPage.formatingData.BlueSideColorTextSummoner</spam>
                    <br /><spam style="font-weight: bold">Blue Side Color Separation Bar  </spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.BlueSideColorSeparationBar" @onclick="@Overlay.SetBlueSideColorSeparationBar"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.BlueSideColorSeparationBar"> @RunesAdcPage.formatingData.BlueSideColorSeparationBar</spam>
                    <EditForm Model="@overlay" OnValidSubmit="@Overlay.BlueSideColorBorderChampionSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <label style="font-weight: bold">Blue Side Color Border Champion ("@RunesAdcPage.formatingData.BlueSideColorBorderChampion") : </label>
                        <InputNumber id="name" style="width: 40px" @bind-Value="overlay.BlueSideColorBorderChampion" placeholder="2" />
                        <button class="btn btn-primary button-form button-color" style="background-color: @Overlay.TempsBlueSideColorBorderChampion()" @onclick="@Overlay.SetBlueSideColorBorderChampion"></button>
                        <button class="btn btn-primary button-form" style="background-color: darkgreen" type="submit">Submit</button>
                    </EditForm>
                    <br /><spam style="font-weight: bold">Red Side Color Text Summoner  </spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.RedSideColorTextSummoner" @onclick="@Overlay.SetRedSideColorTextSummoner"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.RedSideColorTextSummoner"> @RunesAdcPage.formatingData.RedSideColorTextSummoner</spam>
                    <br /><spam style="font-weight: bold">Red Side Color Separation Bar  </spam><button class="btn btn-primary button-form button-color" style="background-color: @RunesAdcPage.formatingData.RedSideColorSeparationBar" @onclick="@Overlay.SetRedSideColorSeparationBar"></button> <spam style="font-weight: bold ;color: @RunesAdcPage.formatingData.RedSideColorSeparationBar"> @RunesAdcPage.formatingData.RedSideColorSeparationBar</spam>
                    <EditForm Model="@overlay" OnValidSubmit="@Overlay.RedSideColorBorderChampionSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <label style="font-weight: bold">Red Side Color Border Champion ("@RunesAdcPage.formatingData.RedSideColorBorderChampion") : </label>
                        <InputNumber id="name" style="width: 40px" @bind-Value="overlay.RedSideColorBorderChampion" placeholder="2" />
                        <button class="btn btn-primary button-form button-color" style="background-color: @Overlay.TempsRedSideColorBorderChampion()" @onclick="@Overlay.SetRedSideColorBorderChampion"></button>
                        <button class="btn btn-primary button-form" style="background-color: darkgreen" type="submit">Submit</button>
                    </EditForm>
                    <br />
                </div>

                <br />
                <div class="color-picker" style="visibility: @colorPicker">
                    <div class="color-picker-position">
                        <MudGrid>
                            <MudColorPicker Value="colorValue" @bind-Text="colorValue" Style="@($"color: {colorValue};")" DisableToolbar="false" DisableAlpha="false" DisableColorField="false" DisablePreview="false" DisableSliders="false" DisableInputs="false" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.HEX" PickerVariant="PickerVariant.Static" />
                        </MudGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />


@code {

    public static LaneInfo laneSelectionSummoner1 = new();
    public static LaneInfo laneSelectionSummoner2 = new();
    public static LaneInfo laneSelectionSummoner3 = new();
    public static LaneInfo laneSelectionSummoner4 = new();
    public static LaneInfo laneSelectionSummoner5 = new();
    public static LaneInfo laneSelectionSummoner6 = new();
    public static LaneInfo laneSelectionSummoner7 = new();
    public static LaneInfo laneSelectionSummoner8 = new();
    public static LaneInfo laneSelectionSummoner9 = new();
    public static LaneInfo laneSelectionSummoner10 = new();

    public static Overlay overlay = new();

    private System.Timers.Timer timer = new(5000);

    protected override void OnInitialized()
    {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.Start();
    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose() => timer.Dispose();
}
